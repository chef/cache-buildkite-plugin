#!/bin/bash

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck disable=SC1090
. "$DIR/../lib/shared.bash"

# get bucket name from org slug ie.. chef-oss or chef
if [[ "${BUILDKITE_ORGANIZATION_SLUG}" == "chef-oss" ]]; then
  bucket_name="core-buildkite-cache-chef-oss-prod"
elif [[ "${BUILDKITE_ORGANIZATION_SLUG}" == "chef" ]]; then
  bucket_name="core-buildkite-cache-chef-prod"
else
  bucket_name="core-buildkite-cache-chef-canary-canary"
fi

paths=( $(plugin_read_list CACHED_FOLDERS) )

for path in "${paths[@]}"
do
  if [[ -d ${path} ]]; then
    filename=`echo ${path} |sed 's/\//_/g'`

    if [[ ${filename: -1} == "_" ]]; then
      filename=${filename::${#filename}-1}
    fi

    BUILDKITE_LABEL=`echo ${BUILDKITE_LABEL} |sed 's/\///g'`

    s3_bucket="s3://${bucket_name}/${BUILDKITE_PIPELINE_SLUG}/${BUILDKITE_LABEL}"

    aws s3 ls ${s3_bucket}/${filename}.tar.gz
    rc=$?
    if [[ ${rc} -eq 0 ]]; then
      echo "--- :aws: :amazon-s3: cp ${filename}"
      aws s3 cp "${s3_bucket}/${filename}.tar.gz" "."
      
      echo "--- untar into ${path}"
      tar -xzf ${filename}.tar.gz
    else 
      echo "-- skipping :aws: :amazon-s3: cp as ${filename}.tar.gz does not exist in ${s3_bucket}"
    fi
  else
    echo "--- skipping, ${path} is not a directory"
  fi
done
